91012920095308c84ad191d31d2d6b71
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const GildedRose_1 = require("../app/GildedRose");

const ItemFactory_1 = require("../app/ItemFactory");

const ItemSellIn_1 = require("../app/ItemSellIn");

const ItemQuality_1 = require("../app/ItemQuality");

describe('GildedRose', () => {
  it('should decreased sellIn value', () => {
    const item = new ItemFactory_1.ItemFactory("whatever", 10, 0);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(JSON.stringify(item.sellIn)).toEqual(new ItemSellIn_1.ItemSellIn(9));
  });
  it('should decreased quality value', () => {
    const item = new ItemFactory_1.ItemFactory("whatever", 1, 10);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toMatchObject(new ItemQuality_1.ItemQuality(9));
  });
  it('should testThatQualityDecreasesTwiceAsMuchWhenSellByIsPassed', () => {
    const item = new ItemFactory_1.ItemFactory("whatever", 0, 10);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toMatchObject(8);
  });
  it('quality should never be negative', () => {
    const item = new ItemFactory_1.ItemFactory("whatever", 0, 0);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toMatchObject(0);
  });
  it('testAgedBrieIncreasesQualityWithAge', () => {
    const item = new ItemFactory_1.ItemFactory("Aged Brie", 5, 1);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toMatchObject(2);
  });
  it('testQualityNeverIncreasesPastFifty', () => {
    const item = new ItemFactory_1.ItemFactory("Aged Brie", 5, 50);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(50);
  });
  it('should test Sulfuras never changes', () => {
    const item = new ItemFactory_1.ItemFactory("Sulfuras, Hand of Ragnaros", 0, 25);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(25);
    expect(item.sellIn).toBe(0);
  });
  it('testBackstagePassIncreasesQualityByOneIfSellByGreaterThenTen', () => {
    const item = new ItemFactory_1.ItemFactory("Backstage passes to a TAFKAL80ETC concert", 11, 20);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(21);
  });
  it('testBackstagePassIncreasesQualityByTwoIfSellBySmallerThanTen', () => {
    const item = new ItemFactory_1.ItemFactory("Backstage passes to a TAFKAL80ETC concert", 6, 20);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(22);
  });
  it('testBackstagePassIncreasesQualityByThreeIfSellBySmallerThanFive', () => {
    const item = new ItemFactory_1.ItemFactory("Backstage passes to a TAFKAL80ETC concert", 5, 20);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(23);
  });
  it('should testBackstagePassLosesValueAfterSellByPasses', () => {
    const item = new ItemFactory_1.ItemFactory("Backstage passes to a TAFKAL80ETC concert", 0, 20);
    const gildedRose = new GildedRose_1.GildedRose();
    gildedRose.updateQuality([item]);
    expect(item.quality).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,